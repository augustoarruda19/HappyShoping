ca√ß√µes maiores, como sistemas de compras online, cadastros de clientes ou plataformas de servi√ßos.

## üîß Tecnologias Utilizadas

- **Node.js + Express**: Respons√°vel pelo servidor backend e pelas rotas da API.
- **MySQL**: Banco de dados relacional onde ficam armazenados os usu√°rios.
- **JavaScript + HTML + CSS**: Interface simples para consumir a API.
- **CORS e Body-Parser**: Usados para permitir comunica√ß√£o entre frontend e backend, e para tratar dados enviados no formato JSON.

## üìÇ Funcionalidades Principais

### 1. Conex√£o com o Banco de Dados

O sistema conecta-se ao banco MySQL chamado `happyshopping`. Dentro desse banco, existe a tabela `usuarios`, que armazena:

| Campo    | Tipo            | Descri√ß√£o                   |
|----------|-----------------|-----------------------------|
| `id`     | INT (PK, Auto)   | Identificador √∫nico (autoincremento) |
| `nome`   | VARCHAR(255)     | Nome do usu√°rio             |
| `email`  | VARCHAR(255)     | E-mail √∫nico de login       |
| `senha`  | VARCHAR(255)     | Senha cadastrada            |

### 2. Rotas da API

O backend disponibiliza os seguintes **endpoints REST**:

#### üîπ Rota Inicial

- **M√©todo**: `GET /`
- **Descri√ß√£o**: Retorna uma mensagem de status confirmando que o servidor est√° ativo.

#### üîπ Cadastro de Usu√°rio

- **M√©todo**: `POST /usuarios`
- **Descri√ß√£o**: Recebe um objeto JSON com nome, email e senha para cadastrar um novo usu√°rio.
  
**Exemplo de Request**:

```json
{
  "nome": "Ana Silva",
  "email": "ana@email.com",
  "senha": "123456"
}
Resposta (Sucesso):

json
Copiar c√≥digo
{
  "message": "Usu√°rio cadastrado com sucesso!"
}
Resposta (Erro):

json
Copiar c√≥digo
{
  "error": "Campos faltando ou falha na inser√ß√£o."
}
üîπ Listagem de Usu√°rios
M√©todo: GET /usuarios

Descri√ß√£o: Retorna todos os registros de usu√°rios cadastrados no banco de dados.

Exemplo de Resposta:

json
Copiar c√≥digo
[
  { "id": 1, "nome": "Ana Silva", "email": "ana@email.com", "senha": "123456" },
  { "id": 2, "nome": "Jo√£o Souza", "email": "joao@email.com", "senha": "abcdef" }
]
üöÄ Fluxo de Funcionamento
O usu√°rio acessa o frontend (HTML/JS).

O frontend envia requisi√ß√µes para o backend Node.js.

O backend processa os dados e acessa o banco MySQL.

O banco retorna os dados, que s√£o exibidos na interface para o usu√°rio.

üõ†Ô∏è Como Rodar o Projeto
1. Clone o reposit√≥rio
bash
Copiar c√≥digo
git clone https://github.com/seu-usuario/happyshopping.git
2. Instale as depend√™ncias
bash
Copiar c√≥digo
cd happyshopping
npm install
3. Configure o Banco de Dados
Certifique-se de que o MySQL est√° instalado e crie um banco de dados chamado happyshopping.

sql
Copiar c√≥digo
CREATE DATABASE happyshopping;
4. Inicie o Servidor
bash
Copiar c√≥digo
npm start
O servidor estar√° dispon√≠vel em http://localhost:3000.

5. Teste as APIs
Para testar o cadastro de usu√°rios, envie uma requisi√ß√£o POST para http://localhost:3000/usuarios com um JSON contendo os dados do usu√°rio.

Para listar os usu√°rios cadastrados, envie uma requisi√ß√£o GET para http://localhost:3000/usuarios.
